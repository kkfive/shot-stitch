name: 生成视频截图

on:
  workflow_dispatch:
    inputs:
      video_url:
        description: '视频 URL'
        required: true
        type: string
      preset:
        description: '预设模式'
        required: false
        default: 'dynamic'
        type: choice
        options:
        - movie
        - lecture
        - quick
        - dynamic
      target_repo:
        description: '发布到的仓库'
        required: false
        default: 'kkfive/shot-stitch'
        type: string
      

permissions:
  contents: read

jobs:
  generate-screenshots:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 验证输入
      run: |
        if [[ ! "$VIDEO_URL" =~ ^https?:// ]]; then
          echo "❌ 无效的 URL 格式"
          exit 1
        fi
        echo "✅ URL 验证通过"
      env:
        VIDEO_URL: ${{ inputs.video_url }}
    
    - name: 设置 Hosts 映射
      run: |
        if [ -n "$HOSTS_MAPPING" ]; then
          echo "🔧 设置 hosts 映射..."
          echo "$HOSTS_MAPPING" | sudo tee -a /etc/hosts > /dev/null
          echo "✅ Hosts 映射设置完成"
        else
          echo "ℹ️ 未设置 hosts 映射，跳过"
        fi
      env:
        HOSTS_MAPPING: ${{ secrets.HOSTS_MAPPING }}
    
    - name: 下载视频
      run: |
        mkdir -p video_input

        echo "⬇️ 正在获取视频资源..."
        echo "🔗 URL: $VIDEO_URL"

        # 从 URL 中提取原始文件名
        ORIGINAL_FILENAME=$(echo "$VIDEO_URL" | sed 's/.*\///' | sed 's/\?.*$//')
        if [ -z "$ORIGINAL_FILENAME" ] || [[ ! "$ORIGINAL_FILENAME" =~ \. ]]; then
          ORIGINAL_FILENAME="video.mp4"
        fi

        echo "📝 原始文件名: $ORIGINAL_FILENAME"
        echo "ORIGINAL_FILENAME=$ORIGINAL_FILENAME" >> $GITHUB_ENV

        # 首先获取文件信息
        echo "📊 获取文件信息..."
        CONTENT_LENGTH=$(curl -sI -L "$VIDEO_URL" | grep -i content-length | tail -1 | cut -d' ' -f2 | tr -d '\r')
        if [ -n "$CONTENT_LENGTH" ] && [ "$CONTENT_LENGTH" -gt 0 ]; then
          CONTENT_LENGTH_MB=$((CONTENT_LENGTH / 1024 / 1024))
          echo "📏 文件大小: ${CONTENT_LENGTH_MB}MB"
        else
          echo "⚠️ 无法获取文件大小信息"
        fi

        # 使用 curl 下载，保持原始文件名
        echo "⬇️ 开始下载..."
        if curl -L --fail --progress-bar \
               --connect-timeout 30 --max-time 3600 \
               --user-agent "Mozilla/5.0 (compatible; VideoProcessor/1.0)" \
               --output "video_input/$ORIGINAL_FILENAME" \
               --write-out "✅ 下载完成 - 实际大小: %{size_download} 字节 - 总用时: %{time_total}s - 平均速度: %{speed_download} B/s\n" \
               "$VIDEO_URL"; then

          # 验证文件并显示友好的大小
          if [ -f "video_input/$ORIGINAL_FILENAME" ] && [ -s "video_input/$ORIGINAL_FILENAME" ]; then
            FILE_SIZE=$(du -h "video_input/$ORIGINAL_FILENAME" | cut -f1)
            FILE_SIZE_BYTES=$(stat -c%s "video_input/$ORIGINAL_FILENAME" 2>/dev/null || stat -f%z "video_input/$ORIGINAL_FILENAME" 2>/dev/null)
            echo "📊 最终文件大小: ${FILE_SIZE} (${FILE_SIZE_BYTES} 字节)"

            # 验证文件完整性（如果有预期大小）
            if [ -n "$CONTENT_LENGTH" ] && [ "$CONTENT_LENGTH" -gt 0 ]; then
              if [ "$FILE_SIZE_BYTES" -eq "$CONTENT_LENGTH" ]; then
                echo "✅ 文件完整性验证通过"
              else
                echo "⚠️ 文件大小不匹配 (预期: $CONTENT_LENGTH, 实际: $FILE_SIZE_BYTES)"
              fi
            fi
          else
            echo "❌ 下载的文件无效或为空"
            exit 1
          fi
        else
          echo "❌ 视频下载失败"
          exit 1
        fi
      env:
        VIDEO_URL: ${{ inputs.video_url }}
    
    - name: 生成截图
      run: |
        echo "🎬 开始生成截图..."

        # 从原始文件名中提取基础名称（不含扩展名）
        VIDEO_FILENAME=$(echo "$ORIGINAL_FILENAME" | sed 's/\.[^.]*$//')
        VIDEO_FILENAME=$(echo "$VIDEO_FILENAME" | sed 's/[^a-zA-Z0-9_-]/_/g' | sed 's/__*/_/g' | sed 's/^_\|_$//g')

        echo "📝 视频文件名: $VIDEO_FILENAME"
        echo "VIDEO_FILENAME=$VIDEO_FILENAME" >> $GITHUB_ENV

        # 运行 shot-stitch Docker 容器，使用原始文件名
        docker run --rm \
          -v $(pwd)/video_input:/data \
          dreamytzk/shot-stitch:latest \
          "/data/$ORIGINAL_FILENAME" \
          --preset ${{ inputs.preset }} \
          --html \
          --force

        # 检查生成的文件
        SCREENSHOT_COUNT=$(find video_input/ -type f \( -name "*.webp" -o -name "*.jpg" -o -name "*.png" -o -name "*.html" \) ! -name "$ORIGINAL_FILENAME" | wc -l)

        if [ "$SCREENSHOT_COUNT" -eq 0 ]; then
          echo "❌ 没有生成任何截图文件"
          exit 1
        fi

        echo "✅ 截图生成完成，共生成 $SCREENSHOT_COUNT 个文件"

        # 列出生成的文件
        echo "📊 生成的文件:"
        find video_input/ -type f \( -name "*.webp" -o -name "*.jpg" -o -name "*.png" -o -name "*.html" \) ! -name "$ORIGINAL_FILENAME" | while read file; do
          echo "  - $(basename "$file") ($(du -h "$file" | cut -f1))"
        done
    
    - name: 准备 Release 信息
      run: |
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        RELEASE_TAG="screenshots-${TIMESTAMP}"
        RELEASE_NAME="$VIDEO_FILENAME 截图 - $(date '+%Y-%m-%d %H:%M:%S')"
        TARGET_REPO="${{ inputs.target_repo }}"

        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
        echo "TARGET_REPO=$TARGET_REPO" >> $GITHUB_ENV
        
        # 创建 Release 描述
        echo "# 视频截图文件" > release_notes.md
        echo "" >> release_notes.md
        echo "**视频文件名**: \`$VIDEO_FILENAME\`" >> release_notes.md
        echo "**预设模式**: \`${{ inputs.preset }}\`" >> release_notes.md
        echo "**目标仓库**: \`$TARGET_REPO\`" >> release_notes.md
        echo "**生成时间**: \`$(date '+%Y-%m-%d %H:%M:%S')\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 包含文件" >> release_notes.md
        find video_input/ -type f \( -name "*.webp" -o -name "*.jpg" -o -name "*.png" -o -name "*.html" \) ! -name "$ORIGINAL_FILENAME" | while read file; do
          original_filename=$(basename "$file")

          # 保持原始文件名，不进行重命名
          echo "- \`$original_filename\` ($(du -h "$file" | cut -f1))" >> release_notes.md
        done
        echo "- \`${VIDEO_FILENAME}_all_files.zip\` (包含所有文件的压缩包)" >> release_notes.md
        echo "" >> release_notes.md
        echo "---" >> release_notes.md
        echo "*由 GitHub Actions 自动生成*" >> release_notes.md
        
        echo "✅ Release 信息准备完成"
    
    - name: 创建 Release 并上传文件
      run: |
        echo "🚀 创建 Release 并上传文件..."

        # 创建 Release
        gh release create "$RELEASE_TAG" \
          --repo "$TARGET_REPO" \
          --title "$RELEASE_NAME" \
          --notes-file release_notes.md

        echo "✅ Release 创建成功: $RELEASE_TAG"

        # 创建临时目录用于重命名文件
        mkdir -p temp_upload

        # 上传所有截图文件（保持原始文件名）
        echo "📤 上传截图文件..."
        find video_input/ -type f \( -name "*.webp" -o -name "*.jpg" -o -name "*.png" -o -name "*.html" \) ! -name "$ORIGINAL_FILENAME" | while read file; do
          original_filename=$(basename "$file")

          # 复制文件到临时目录，保持原始文件名
          cp "$file" "temp_upload/$original_filename"
          echo "📤 上传: $original_filename"

          gh release upload "$RELEASE_TAG" "temp_upload/$original_filename" \
            --repo "$TARGET_REPO" \
            --clobber
        done

        # 创建包含所有文件的压缩包
        echo "📦 创建压缩包..."
        cd temp_upload
        zip_filename="${VIDEO_FILENAME}_all_files.zip"
        zip -r "$zip_filename" .
        echo "📤 上传压缩包: $zip_filename"

        gh release upload "$RELEASE_TAG" "$zip_filename" \
          --repo "$TARGET_REPO" \
          --clobber
        cd ..

        echo "✅ 所有文件上传完成"
        echo "RELEASE_URL=https://github.com/$TARGET_REPO/releases/tag/$RELEASE_TAG" >> $GITHUB_ENV
      env:
        GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
    
    - name: 生成下载信息
      run: |
        echo "🎉 截图已成功上传到目标仓库!"
        echo ""
        echo "📍 目标仓库: $TARGET_REPO"
        echo "🏷️  Release 标签: $RELEASE_TAG"
        echo "🔗 Release 链接: $RELEASE_URL"
        echo ""
        echo "📥 下载方式:"
        echo "1. 访问目标仓库的 Releases 页面"
        echo "2. 找到标签为 '$RELEASE_TAG' 的 Release"
        echo "3. 直接下载需要的文件（无需解压）"
        echo ""
        echo "📊 可下载的文件:"
        find video_input/ -type f \( -name "*.webp" -o -name "*.jpg" -o -name "*.png" -o -name "*.html" \) ! -name "$ORIGINAL_FILENAME" | while read file; do
          original_filename=$(basename "$file")
          echo "  - $original_filename ($(du -h "$file" | cut -f1))"
        done
        echo "  - ${VIDEO_FILENAME}_all_files.zip (包含所有文件的压缩包)"
        echo ""
        echo "🔒 只有目标仓库的协作者可以访问和下载"
    
    - name: 清理临时文件
      if: always()
      run: |
        echo "🧹 清理临时文件..."
        rm -rf video_input/ release_notes.md temp_upload/
        echo "✅ 清理完成"
